---

- name: Create TEMP dir
  tempfile:
    state: directory
  register: tempdir

- name: Install tasks
  block:

    - name: Upload local artifact
      copy:
        src: "{{ _cd_build.local_artifacts_dir }}/{{ _cd_build.artifacts[artifact].artifact.filename }}"
        dest: "{{ tempdir.path }}"
        mode: 0640
      when: _cd_build.use_local_artifacts|default(false)

    - name: Download tasks
      block:
        - name: Download artifact
          aws_s3:
            bucket: "{{ _cd_build.bucket }}"
            object: "{{ _cd_build.prefix | default('') }}/{{ _cd_build.branch }}/builds/{{ _cd_build.number }}/{{ _cd_build.artifacts[artifact].artifact.filename }}"
            dest: "{{ tempdir.path }}/{{ _cd_build.artifacts[artifact].artifact.filename }}"
            mode: get
            overwrite: different

        - name: Download signature file of artifact
          aws_s3:
            bucket: "{{ _cd_build.bucket }}"
            object: "{{ _cd_build.prefix | default('') }}/{{ _cd_build.branch }}/builds/{{ _cd_build.number }}/{{ _cd_build.artifacts[artifact].artifact.filename }}.sig"
            dest: "{{ tempdir.path }}/{{ _cd_build.artifacts[artifact].artifact.filename }}.sig"
            mode: get
            overwrite: different

        - name: Verify signed file
          command: "gpg --verify --trusted-key {{ _cd_build.gpg.key }} {{ tempdir.path }}/{{ _cd_build.artifacts[artifact].artifact.filename }}.sig {{ tempdir.path }}/{{ _cd_build.artifacts[artifact].artifact.filename }}"
          changed_when: no
      when: not _cd_build.use_local_artifacts|default(false)

    - name: Create install dir
      file:
        path: "{{ _cd_build.artifacts[artifact].install.dir }}"
        state: directory
        owner: "{{ _cd_build.artifacts[artifact].install.user }}"
        group: "{{ _cd_build.artifacts[artifact].install.group }}"
        mode: 0755

    - name: "Include install-{{ _cd_build.artifacts[artifact].artifact.type }}"
      include_tasks: "install-{{ _cd_build.artifacts[artifact].artifact.type }}.yml"
      vars:
        src_dir: "{{ tempdir.path }}"

  always:

    - name: Cleanup TEMP dir
      file:
        name: "{{ tempdir.path }}"
        state: absent
