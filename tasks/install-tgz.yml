---

- name: Create unarchive TEMP dir
  ansible.builtin.tempfile:
    state: directory
  register: unarchive_tempdir

- name: Artifact tasks
  block:

    - name: Unarchive 'tar.gz' file
      ansible.builtin.unarchive:
        src: "{{ src_dir }}/{{ _cd_build.artifacts[artifact].artifact.filename }}"
        dest: "{{ unarchive_tempdir.path }}"
        owner: "{{ _cd_build.artifacts[artifact].install.user }}"
        group: "{{ _cd_build.artifacts[artifact].install.group }}"
        remote_src: yes

    - name: "Check Git-Commit for new installed artifact '{{ artifact }}'"
      ansible.builtin.include_tasks: "check-git-commit.yml"
      vars:
        artifact_dir: "{{ unarchive_tempdir.path }}"
        # This is a filename pattern that should be searched for in the artifact_dir.
        # The result of that find will be checked.
        artifact_filename_pattern: "{{ _cd_build.artifacts[artifact].install.filename }}"
        # This should fail it won't match because that is the artifact that will be installed.
        fail_if_not_matched: yes
      when: not _cd_build.use_local_artifacts|default(false)

    - name: "Copy unarchived 'tar.gz' content to install dir {{ _cd_build.artifacts[artifact].install.dir }}"
      ansible.posix.synchronize:
        src: "{{ unarchive_tempdir.path }}/"
        dest: "{{ _cd_build.artifacts[artifact].install.dir }}"
        recursive: yes
      delegate_to: "{{ inventory_hostname }}"

    - name: "Install Build Info for artifact '{{ artifact }}'"
      ansible.builtin.include_tasks: install-build-info.yml

  always:

    - name: Cleanup unarchive TEMP dir
      ansible.builtin.file:
        name: "{{ unarchive_tempdir.path }}"
        state: absent
